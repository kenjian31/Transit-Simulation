/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>

#include <iostream>
#include <string>
#include <list>
#include <string>

#include "../src/passenger_loader.h"
#include "../src/passenger_unloader.h"
#include "../src/bus.h"
#include "../src/stop.h"
#include "src/route.h"
#include "src/random_passenger_generator.h"

using namespace std;

/******************************************************
* TEST FEATURE SetUp
*******************************************************/
class BusTests : public ::testing::Test {
protected:
  Route *route1, *route2;
  Bus *bus1, *bus2;
  Stop *stop1, *stop2;
  Stop **stops1, **stops2;
  Passenger *passenger, *passenger1;
  RandomPassengerGenerator *generator1;
  double ps[1];


  virtual void SetUp() {
    stop1 = new Stop(1, 1, -1.2);
    stop2 = new Stop(2, 2, -1.0);
    stops1= new Stop*[2];
    stops2 = new Stop*[2];
    stops1[0] = stop1;
    stops1[1] = stop2;

    stops2[0] = stop2;
    stops2[1] = stop1;

    ps[0] = 20.0;
    std::list<double> prob;
    std::list<Stop *> stop2;
    generator1 = new RandomPassengerGenerator(prob, stop2);
    // bus1 = new Bus("aas", );
    route1 = new Route("STRI", stops1, ps, 1, generator1);
    // bus2 = new Bus();
    route2 = new Route("STRI1", stops2, ps, 2, generator1);
  }

  virtual void TearDown() {
    delete route1;
    delete route2;
    route1 = NULL;
    route2 = NULL;
    delete bus1;
    delete bus2;
    bus1 = NULL;
    bus2 = NULL;
  }
};

TEST_F(BusTests, Constructor){
    bus1 = new Bus("jian", route1, route2, 1, 5.0);
    std::string expected_output_1 = "Name: jian";
    testing::internal::CaptureStdout();
    bus1->Report(std::cout);
    std::string output1 =testing::internal::GetCapturedStdout();
    int p1 = output1.find(expected_output_1);
    EXPECT_GE(p1,0);
}

TEST_F(BusTests, IsTripComplete){
  bus1 = new Bus("jian", route1, route2, 1, 20.0);
  EXPECT_EQ(bus1->IsTripComplete(), false);
  bus1->Update();
  bus1->Update();
  bus1->Update();
  EXPECT_EQ(bus1->IsTripComplete(), true);

}

TEST_F(BusTests, Move){
  bus1 = new Bus("jian", route1, route2, 1, 20.0);
  EXPECT_EQ(bus1->Move(), false);
  EXPECT_EQ(bus1->GetNextStop() != NULL, true);
}

TEST_F(BusTests, LoadPassenger){
  bus1 = new Bus("jian", route1, route2, 60, 20.0);
  passenger = new Passenger(1, "asd");
  EXPECT_EQ(bus1->LoadPassenger(passenger), true);
  bus2 = new Bus("jian", route1, route2, 0, 20.0);
  EXPECT_EQ(bus2->GetCapacity() > 0, false);
}
