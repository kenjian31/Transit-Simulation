/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>

#include <iostream>
#include <string>
#include <list>
#include <string>

#include "../src/passenger_loader.h"
#include "../src/passenger_unloader.h"
#include "../src/bus.h"
#include "../src/stop.h"
#include "../src/route.h"
#include "src/random_passenger_generator.h"
#include "../src/passenger_generator.h"

using namespace std;

/******************************************************
* TEST FEATURE SetUp
*******************************************************/
class RouteTests : public ::testing::Test {
protected:

  Passenger *passenger;
  Stop *stop1;
  Stop **stop;
  Bus *bus1;
  Route *route1, *route2;
  RandomPassengerGenerator *generator1;
  double ps[1];


  virtual void SetUp() {
    passenger = new Passenger();
    stop1 = new Stop(1, 1.0, 1.2);
    stop= new Stop*[1];
    stop[0]= stop1;
    ps[0] = 20.0;
    std::list<double> prob;
    std::list<Stop *> stop2;
    generator1 = new RandomPassengerGenerator(prob, stop2);

  }

  virtual void TearDown() {
    delete passenger;
    delete stop1;
    passenger = NULL;
    stop1 = NULL;
    stop = NULL;
    bus1 = NULL;
    // route1 = NULL;
    generator1 = NULL;
  }
};

TEST_F(RouteTests, Constructor){
  SetUp();
  route1 = new Route("STRI", stop, ps, 1, generator1);
  std::string expected_output_1 = "Name: STRI";
  testing::internal::CaptureStdout();
  route1->Report(std::cout);
  std::string output1 =testing::internal::GetCapturedStdout();


  int p1 = output1.find(expected_output_1);
  EXPECT_GE(p1,0);
}

TEST_F(RouteTests, IsAtEnd){
  route1 = new Route("STRI", stop, ps, 0, generator1);
  EXPECT_EQ(route1->IsAtEnd(), true);
  route1 = new Route("STRI", stop, ps, 1, generator1);
  EXPECT_EQ(route1->IsAtEnd(), false);
}
